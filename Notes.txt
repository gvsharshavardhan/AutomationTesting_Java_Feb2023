Front end Developer
- UI, Websites, App UI
Javascript, html, css - VS Code
Angular js, nodejs, reactjs


Back end Developer
- API, Webservices
- java - INtellij ,python,c,c++,kotlin, rust,go,javascript(nodejs)


Testing done by developers - UNIT Testing
unit tests


Complier based

java -> bytecode -> jvm
0,1

interpreted lang - python
print abc

javacomplier -> jvm(bytecode)


native -> java,kotlin
hybrid -> flutter, Dart
ios -> swift

wora
write once read anywhere

jvm

win -> jvm win
lin
mac

shortcuts:
-------------
ctrl + d -> duplicate line
ctrl + alt + l -> format code
ctrl + / => comment line
ctrl + alt + o -> removes unused imports

block comment:
-------------
/**
dummy content
dummy content
dummy content
**/

for:
when we are sure with no of iterations

while:
when we are not sure with no of iterations but we know when to stop

do while:
executes the code at least once even if the condition is false


static:
------------
Memory for static entities will be assigned during class loading

.java
compile -> .class
.class will be loaded into JVM(java virtual machine) -> class loading
run

when ever you are creating an object during run, then memory will be assigned to instance entities


1 kitchen, n ....
no plates
123456..10


4 pillars:
------------
1. Inheritance
2. Polymorphism
3. Abstraction
4. Encapsulation

Final:
---------
Variable -> cannot be modified
Method -> cannot be overridden
Class - > cannot be extended/inheritance
Constructor -> invalid


public
private
default
protected

exception handling
collections







OOPS:
------
Inheritance -> code resuability
encapsulation -> security

polymorphism -> reusability, having consistency
abstraction -> if user has just an idea

Class
Object

constructor - to init instance variables

int a
instance variables? -> are part of object, 5 objects, a, a,a,a,a
static int b
static variables -> all 5 objects share common mem space, part of class

this -> is to point to the entites in your class
super-> is to point to the entities of the parent class
super() -> to call parent class constructor

final
------
final void m1(){
}

cannot be overridden

overriding?

father
final void m1(){
xyz
}

daughter extends father
void m1(){
lmn
}

daughter d = new daughter();
d.m1() -> lmn


final int a; -> cannot be modified

final Car{ -> cannot be extended/inherited
}



Abstraction -> abstract, interfaces

protected
default
public

packages

Interface:
-----------------
by default,

all the methods inside interface are abstract and public


public   -> any where inside the project
protected  -> within pkg + outside pkg(should be within inheritance)
default   -> within pkg
private    -> within class


public > protected > default > private


overriding

f protected m1(){father} -> son protected/public m1(){son}

access modifier for child's class methods should be either same modifer of parent class method or greater than parent's methods

Inhritance:
-------------
single level
multi level
hierarch
hybrid
mutiple


Drawback of using Arrays:
-------------------------
1. Size is fixed
2. fixed datatype



Collections:
------------

Collections
1. List (I)
    1. ArrayList
    2. LinkedList
2. Set (I)
    1. HashSet
    2. LinkedHashSet


collection:
------------
1. List can store any number of elements
2. can store any date type
3. Dynamic in size

List:
-------
4. It allows duplicate elements
5. You can insert null into the list
6. Insertion order is preserved
7. Follows indexing


ArrayList vs LinkedList:
-------------------------
way how they store elements inside memory



Set:
-------
1. It will not allow duplicates
2. Insertion order is not preserved
3. null values are allowed
4. Index system is not application


Exceptions:
-----------------

compile time

run time
checked, unchecked


errors
---------
user cannot handle errors , eg: hardware related problem(memory outage)










